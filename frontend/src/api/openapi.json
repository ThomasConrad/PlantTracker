{
  "openapi": "3.0.3",
  "info": {
    "title": "Planty API",
    "description": "A REST API for Planty - tracking plant care and growth metrics",
    "license": {
      "name": "MIT"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/admin/dashboard": {
      "get": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Get admin dashboard data",
        "operationId": "get_admin_dashboard",
        "responses": {
          "200": {
            "description": "Admin dashboard data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminDashboardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/admin/health": {
      "get": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Get system health information",
        "operationId": "get_system_health",
        "responses": {
          "200": {
            "description": "System health information"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/admin/settings": {
      "get": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Get admin settings",
        "operationId": "get_admin_settings",
        "responses": {
          "200": {
            "description": "Admin settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSettingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      },
      "put": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Update admin settings",
        "operationId": "update_admin_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAdminSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Settings updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSettingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "List all users with pagination",
        "operationId": "list_users",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (default: 1)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page (default: 20)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by role",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/admin/users/bulk": {
      "post": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Perform bulk actions on users",
        "operationId": "bulk_user_action",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUserActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bulk action completed successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/admin/users/{user_id}": {
      "put": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Update a user's role and permissions",
        "operationId": "update_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      },
      "delete": {
        "tags": [
          "crate::handlers::admin"
        ],
        "summary": "Delete a user (admin only)",
        "operationId": "delete_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User ID to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "crate::handlers::auth"
        ],
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "401": {
            "description": "Authentication failed"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "crate::handlers::auth"
        ],
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid registration data"
          },
          "409": {
            "description": "Email already exists"
          }
        }
      }
    },
    "/google-tasks/auth-url": {
      "get": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Generate Google OAuth authorization URL",
        "operationId": "get_google_auth_url",
        "responses": {
          "200": {
            "description": "Google OAuth authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleOAuthUrlResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Configuration error"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/google-tasks/callback": {
      "get": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Handle Google OAuth callback",
        "operationId": "handle_google_oauth_callback",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "OAuth authorization code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "OAuth state parameter",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to frontend with success/error"
          },
          "400": {
            "description": "Invalid callback parameters"
          }
        }
      }
    },
    "/google-tasks/create-task": {
      "post": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Create a single task",
        "operationId": "create_task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGoogleTaskRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Task created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No Google Tasks connection found"
          },
          "500": {
            "description": "Failed to create task"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/google-tasks/disconnect": {
      "post": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Disconnect Google Tasks integration",
        "operationId": "disconnect_google_tasks",
        "responses": {
          "200": {
            "description": "Google Tasks disconnected successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No Google Tasks connection found"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/google-tasks/status": {
      "get": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Get Google Tasks connection status",
        "operationId": "get_google_tasks_status",
        "responses": {
          "200": {
            "description": "Google Tasks connection status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleTasksStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/google-tasks/store-tokens": {
      "post": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Store Google OAuth tokens (called by frontend after callback)",
        "operationId": "store_google_tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreTokensRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tokens stored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleOAuthSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Failed to store tokens"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/google-tasks/sync-tasks": {
      "post": {
        "tags": [
          "google-tasks"
        ],
        "summary": "Sync plant care tasks to Google Tasks",
        "operationId": "sync_plant_tasks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncPlantTasksRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plant tasks synced successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No Google Tasks connection found"
          },
          "500": {
            "description": "Failed to sync tasks"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/invites/create": {
      "post": {
        "tags": [
          "invites"
        ],
        "operationId": "create_invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Invite code created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/invites/list": {
      "get": {
        "tags": [
          "invites"
        ],
        "operationId": "list_invites",
        "parameters": [
          {
            "name": "created_by",
            "in": "query",
            "description": "Filter by creator user ID",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invite codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InviteResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/invites/validate": {
      "post": {
        "tags": [
          "invites"
        ],
        "operationId": "validate_invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Invite code is valid"
          },
          "400": {
            "description": "Invalid or expired invite code"
          }
        }
      }
    },
    "/invites/waitlist": {
      "post": {
        "tags": [
          "invites"
        ],
        "operationId": "join_waitlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaitlistSignupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Added to waitlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitlistResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or email already exists"
          }
        }
      }
    },
    "/invites/waitlist/list": {
      "get": {
        "tags": [
          "invites"
        ],
        "operationId": "list_waitlist",
        "responses": {
          "200": {
            "description": "List of waitlist entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WaitlistResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/plants": {
      "get": {
        "tags": [
          "plants"
        ],
        "operationId": "list_plants",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of plants to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of plants to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for plant names",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order: date_asc, date_desc, name_asc, name_desc",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of plants",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      },
      "post": {
        "tags": [
          "plants"
        ],
        "operationId": "create_plant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Plant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/plants/{id}": {
      "get": {
        "tags": [
          "plants"
        ],
        "operationId": "get_plant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Plant not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      },
      "put": {
        "tags": [
          "plants"
        ],
        "operationId": "update_plant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Plant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Plant not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      },
      "delete": {
        "tags": [
          "plants"
        ],
        "operationId": "delete_plant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Plant not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    },
    "/plants/{plant_id}/entries": {
      "get": {
        "tags": [
          "crate::handlers::tracking"
        ],
        "operationId": "list_entries",
        "parameters": [
          {
            "name": "plant_id",
            "in": "path",
            "description": "Plant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List tracking entries for plant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackingEntriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Plant not found"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      },
      "post": {
        "tags": [
          "crate::handlers::tracking"
        ],
        "operationId": "create_entry",
        "parameters": [
          {
            "name": "plant_id",
            "in": "path",
            "description": "Plant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTrackingEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Tracking entry created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackingEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Plant not found"
          }
        },
        "security": [
          {
            "session": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AdminDashboardResponse": {
        "type": "object",
        "required": [
          "system_stats",
          "recent_users",
          "recent_invites"
        ],
        "properties": {
          "recent_invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InviteInfo"
            }
          },
          "recent_users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          },
          "system_stats": {
            "$ref": "#/components/schemas/SystemStats"
          }
        }
      },
      "AdminSettingsResponse": {
        "type": "object",
        "required": [
          "max_total_users",
          "default_user_invite_limit",
          "registration_enabled"
        ],
        "properties": {
          "default_user_invite_limit": {
            "type": "integer",
            "format": "int32"
          },
          "max_total_users": {
            "type": "integer",
            "format": "int32"
          },
          "registration_enabled": {
            "type": "boolean"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "required": [
          "user"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "BulkUserAction": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "delete"
            ]
          },
          {
            "type": "object",
            "required": [
              "set_role"
            ],
            "properties": {
              "set_role": {
                "$ref": "#/components/schemas/UserRole"
              }
            }
          },
          {
            "type": "string",
            "enum": [
              "enable_invites"
            ]
          },
          {
            "type": "string",
            "enum": [
              "disable_invites"
            ]
          }
        ]
      },
      "BulkUserActionRequest": {
        "type": "object",
        "required": [
          "user_ids",
          "action"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/BulkUserAction"
          },
          "user_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CareSchedule": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "intervalDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateCareScheduleRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "intervalDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateCustomMetricRequest": {
        "type": "object",
        "required": [
          "name",
          "unit",
          "dataType"
        ],
        "properties": {
          "dataType": {
            "$ref": "#/components/schemas/MetricDataType"
          },
          "name": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "CreateGoogleTaskRequest": {
        "type": "object",
        "description": "Google Tasks task creation request",
        "required": [
          "title",
          "due_time"
        ],
        "properties": {
          "due_time": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:00:00Z"
          },
          "notes": {
            "type": "string",
            "example": "Time to water your Fiddle Leaf Fig. Remember to check soil moisture first.",
            "nullable": true
          },
          "task_list_id": {
            "type": "string",
            "example": "Plant Care",
            "nullable": true
          },
          "title": {
            "type": "string",
            "example": "💧 Water Fiddle Leaf Fig"
          }
        }
      },
      "CreateInviteRequest": {
        "type": "object",
        "properties": {
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "max_uses": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CreatePlantRequest": {
        "type": "object",
        "required": [
          "name",
          "genus"
        ],
        "properties": {
          "customMetrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCustomMetricRequest"
            },
            "nullable": true
          },
          "fertilizingSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCareScheduleRequest"
              }
            ],
            "nullable": true
          },
          "genus": {
            "type": "string"
          },
          "lastFertilized": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastWatered": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "wateringSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCareScheduleRequest"
              }
            ],
            "nullable": true
          }
        }
      },
      "CreateTrackingEntryRequest": {
        "type": "object",
        "required": [
          "entryType",
          "timestamp"
        ],
        "properties": {
          "entryType": {
            "$ref": "#/components/schemas/EntryType"
          },
          "metricId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "photoIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "nullable": true
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "email",
          "name",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "invite_code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "CustomMetric": {
        "type": "object",
        "required": [
          "id",
          "plantId",
          "name",
          "unit",
          "dataType"
        ],
        "properties": {
          "dataType": {
            "$ref": "#/components/schemas/MetricDataType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "plantId": {
            "type": "string",
            "format": "uuid"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "EntryType": {
        "type": "string",
        "enum": [
          "watering",
          "fertilizing",
          "customMetric",
          "note",
          "photo"
        ]
      },
      "GoogleOAuthCallbackRequest": {
        "type": "object",
        "description": "Request payload for OAuth callback",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GoogleOAuthSuccessResponse": {
        "type": "object",
        "description": "Response after successful OAuth completion",
        "required": [
          "success",
          "message",
          "connected_at",
          "scopes"
        ],
        "properties": {
          "connected_at": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "example": "Google Tasks integration configured successfully"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "GoogleOAuthUrlResponse": {
        "type": "object",
        "description": "Response containing OAuth authorization URL",
        "required": [
          "auth_url",
          "state"
        ],
        "properties": {
          "auth_url": {
            "type": "string",
            "example": "https://accounts.google.com/o/oauth2/auth?..."
          },
          "state": {
            "type": "string",
            "example": "abc123xyz"
          }
        }
      },
      "GoogleTasksStatus": {
        "type": "object",
        "description": "Google Tasks connection status",
        "required": [
          "connected"
        ],
        "properties": {
          "connected": {
            "type": "boolean"
          },
          "connected_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "InviteInfo": {
        "type": "object",
        "required": [
          "id",
          "code",
          "max_uses",
          "current_uses",
          "is_active",
          "created_at"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string",
            "nullable": true
          },
          "created_by_name": {
            "type": "string",
            "nullable": true
          },
          "current_uses": {
            "type": "integer",
            "format": "int32"
          },
          "expires_at": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "max_uses": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InviteResponse": {
        "type": "object",
        "required": [
          "id",
          "code",
          "max_uses",
          "current_uses",
          "is_active",
          "created_at"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "current_uses": {
            "type": "integer",
            "format": "int32"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "max_uses": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "MetricDataType": {
        "type": "string",
        "enum": [
          "Number",
          "Text",
          "Boolean"
        ]
      },
      "Photo": {
        "type": "object",
        "required": [
          "id",
          "plantId",
          "filename",
          "originalFilename",
          "size",
          "contentType",
          "createdAt"
        ],
        "properties": {
          "contentType": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "filename": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "originalFilename": {
            "type": "string"
          },
          "plantId": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "width": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PhotosResponse": {
        "type": "object",
        "required": [
          "photos",
          "total"
        ],
        "properties": {
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Photo"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PlantResponse": {
        "type": "object",
        "required": [
          "id",
          "name",
          "genus",
          "wateringSchedule",
          "fertilizingSchedule",
          "customMetrics",
          "createdAt",
          "updatedAt",
          "userId"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "customMetrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomMetric"
            }
          },
          "fertilizingSchedule": {
            "$ref": "#/components/schemas/CareSchedule"
          },
          "genus": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "lastFertilized": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastWatered": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "previewId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "previewUrl": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "string"
          },
          "wateringSchedule": {
            "$ref": "#/components/schemas/CareSchedule"
          }
        }
      },
      "PlantsResponse": {
        "type": "object",
        "required": [
          "plants",
          "total",
          "limit",
          "offset"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "plants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlantResponse"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "StoreTokensRequest": {
        "type": "object",
        "required": [
          "access_token",
          "expires_at"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token from Google OAuth"
          },
          "expires_at": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp when the token expires"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token from Google OAuth (optional)",
            "nullable": true
          }
        }
      },
      "SyncPlantTasksRequest": {
        "type": "object",
        "description": "Google Tasks sync request",
        "properties": {
          "days_ahead": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days in the future to sync tasks",
            "example": 365,
            "nullable": true,
            "maximum": 730,
            "minimum": 1
          },
          "replace_existing": {
            "type": "boolean",
            "description": "Whether to replace existing tasks or only add new ones",
            "example": false,
            "nullable": true
          }
        }
      },
      "SystemStats": {
        "type": "object",
        "required": [
          "total_users",
          "max_total_users",
          "total_invites",
          "active_invites",
          "used_invites",
          "admin_count"
        ],
        "properties": {
          "active_invites": {
            "type": "integer",
            "format": "int32"
          },
          "admin_count": {
            "type": "integer",
            "format": "int32"
          },
          "max_total_users": {
            "type": "integer",
            "format": "int32"
          },
          "total_invites": {
            "type": "integer",
            "format": "int32"
          },
          "total_users": {
            "type": "integer",
            "format": "int32"
          },
          "used_invites": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TrackingEntriesResponse": {
        "type": "object",
        "required": [
          "entries",
          "total"
        ],
        "properties": {
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrackingEntry"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TrackingEntry": {
        "type": "object",
        "required": [
          "id",
          "plantId",
          "entryType",
          "timestamp",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "entryType": {
            "$ref": "#/components/schemas/EntryType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "metricId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "photoIds": {
            "nullable": true
          },
          "plantId": {
            "type": "string",
            "format": "uuid"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "nullable": true
          }
        }
      },
      "UpdateAdminSettingsRequest": {
        "type": "object",
        "properties": {
          "default_user_invite_limit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max_total_users": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "registration_enabled": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "UpdateCareScheduleRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "intervalDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateCustomMetricRequest": {
        "type": "object",
        "required": [
          "name",
          "unit",
          "data_type"
        ],
        "properties": {
          "data_type": {
            "$ref": "#/components/schemas/MetricDataType"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "UpdatePlantRequest": {
        "type": "object",
        "properties": {
          "customMetrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateCustomMetricRequest"
            },
            "nullable": true
          },
          "fertilizingSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateCareScheduleRequest"
              }
            ],
            "nullable": true
          },
          "genus": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "wateringSchedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateCareScheduleRequest"
              }
            ],
            "nullable": true
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "can_create_invites": {
            "type": "boolean",
            "nullable": true
          },
          "max_invites": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ],
            "nullable": true
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "required": [
          "users",
          "total",
          "page",
          "limit",
          "total_pages"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "total_pages": {
            "type": "integer",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "required": [
          "id",
          "email",
          "name",
          "role",
          "canCreateInvites",
          "invitesCreated",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "canCreateInvites": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invitesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "invitesRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxInvites": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "admin",
          "moderator",
          "user"
        ]
      },
      "ValidateInviteRequest": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          }
        }
      },
      "WaitlistResponse": {
        "type": "object",
        "required": [
          "id",
          "email",
          "status",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          }
        }
      },
      "WaitlistSignupRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "admin",
      "description": "Admin user and system management endpoints"
    },
    {
      "name": "invites",
      "description": "Invite system and waitlist endpoints"
    },
    {
      "name": "plants",
      "description": "Plant management endpoints"
    },
    {
      "name": "tracking",
      "description": "Plant care tracking endpoints"
    },
    {
      "name": "photos",
      "description": "Photo management endpoints"
    },
    {
      "name": "google-tasks",
      "description": "Google Tasks integration endpoints"
    }
  ]
}
