openapi: 3.0.3
info:
  title: Plant Tracker API
  description: API for tracking plant care, growth metrics, and photo management
  version: 1.0.0
  contact:
    name: Plant Tracker Support
    email: support@planttracker.com

servers:
  - url: https://api.planttracker.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Invalid credentials

  /auth/register:
    post:
      tags: [Authentication]
      summary: User registration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
                  minLength: 2
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Validation error

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /plants:
    get:
      tags: [Plants]
      summary: Get user's plants
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of plants
          content:
            application/json:
              schema:
                type: object
                properties:
                  plants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plant'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      tags: [Plants]
      summary: Create a new plant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlantRequest'
      responses:
        201:
          description: Plant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'

  /plants/{plantId}:
    get:
      tags: [Plants]
      summary: Get plant details
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Plant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        404:
          description: Plant not found

    put:
      tags: [Plants]
      summary: Update plant
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlantRequest'
      responses:
        200:
          description: Plant updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'

    delete:
      tags: [Plants]
      summary: Delete plant
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Plant deleted

  /plants/{plantId}/photos:
    get:
      tags: [Photos]
      summary: Get plant photos
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        200:
          description: Plant photos
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Photo'
                  total:
                    type: integer

    post:
      tags: [Photos]
      summary: Upload plant photo
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                caption:
                  type: string
                  maxLength: 500
      responses:
        201:
          description: Photo uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'

  /plants/{plantId}/photos/{photoId}:
    delete:
      tags: [Photos]
      summary: Delete plant photo
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: photoId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Photo deleted

  /plants/{plantId}/entries:
    get:
      tags: [Tracking]
      summary: Get plant tracking entries
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/EntryType'
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        200:
          description: Tracking entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrackingEntry'
                  total:
                    type: integer

    post:
      tags: [Tracking]
      summary: Create tracking entry
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackingEntryRequest'
      responses:
        201:
          description: Entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingEntry'

  /plants/{plantId}/entries/{entryId}:
    put:
      tags: [Tracking]
      summary: Update tracking entry
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackingEntryRequest'
      responses:
        200:
          description: Entry updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingEntry'

    delete:
      tags: [Tracking]
      summary: Delete tracking entry
      parameters:
        - name: plantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Entry deleted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Plant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        genus:
          type: string
        wateringIntervalDays:
          type: integer
          minimum: 1
        fertilizingIntervalDays:
          type: integer
          minimum: 1
        customMetrics:
          type: array
          items:
            $ref: '#/components/schemas/CustomMetric'
        lastWatered:
          type: string
          format: date-time
          nullable: true
        lastFertilized:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid

    CustomMetric:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        unit:
          type: string
        dataType:
          type: string
          enum: [number, text, boolean]

    Photo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
        caption:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        plantId:
          type: string
          format: uuid

    TrackingEntry:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/EntryType'
        timestamp:
          type: string
          format: date-time
        value:
          oneOf:
            - type: number
            - type: string
            - type: boolean
        notes:
          type: string
          nullable: true
        metricId:
          type: string
          format: uuid
          nullable: true
        plantId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EntryType:
      type: string
      enum: [watering, fertilizing, custom_metric]

    CreatePlantRequest:
      type: object
      required: [name, genus, wateringIntervalDays, fertilizingIntervalDays]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        genus:
          type: string
          minLength: 1
          maxLength: 100
        wateringIntervalDays:
          type: integer
          minimum: 1
          maximum: 365
        fertilizingIntervalDays:
          type: integer
          minimum: 1
          maximum: 365
        customMetrics:
          type: array
          items:
            type: object
            required: [name, unit, dataType]
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 50
              unit:
                type: string
                maxLength: 20
              dataType:
                type: string
                enum: [number, text, boolean]

    UpdatePlantRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        genus:
          type: string
          minLength: 1
          maxLength: 100
        wateringIntervalDays:
          type: integer
          minimum: 1
          maximum: 365
        fertilizingIntervalDays:
          type: integer
          minimum: 1
          maximum: 365
        customMetrics:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
                minLength: 1
                maxLength: 50
              unit:
                type: string
                maxLength: 20
              dataType:
                type: string
                enum: [number, text, boolean]

    CreateTrackingEntryRequest:
      type: object
      required: [type, timestamp]
      properties:
        type:
          $ref: '#/components/schemas/EntryType'
        timestamp:
          type: string
          format: date-time
        value:
          oneOf:
            - type: number
            - type: string
            - type: boolean
        notes:
          type: string
          maxLength: 1000
        metricId:
          type: string
          format: uuid

    UpdateTrackingEntryRequest:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          oneOf:
            - type: number
            - type: string
            - type: boolean
        notes:
          type: string
          maxLength: 1000