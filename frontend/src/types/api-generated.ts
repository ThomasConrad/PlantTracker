/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/auth-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate Google OAuth authorization URL */
        get: operations["get_google_auth_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Handle Google OAuth callback */
        get: operations["handle_google_oauth_callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/create-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a single task */
        post: operations["create_task"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disconnect Google Tasks integration */
        post: operations["disconnect_google_tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Google Tasks connection status */
        get: operations["get_google_tasks_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/store-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Store Google OAuth tokens (called by frontend after callback) */
        post: operations["store_google_tokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-tasks/sync-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sync plant care tasks to Google Tasks */
        post: operations["sync_plant_tasks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["create_invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_invites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["validate_invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/waitlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["join_waitlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/waitlist/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_waitlist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_plants"];
        put?: never;
        post: operations["create_plant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plants/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get_plant"];
        put: operations["update_plant"];
        post?: never;
        delete: operations["delete_plant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plants/{plant_id}/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_entries"];
        put?: never;
        post: operations["create_entry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthResponse: {
            user: components["schemas"]["UserResponse"];
        };
        CareSchedule: {
            /** Format: double */
            amount?: number | null;
            /** Format: int32 */
            intervalDays?: number | null;
            notes?: string | null;
            unit?: string | null;
        };
        CreateCareScheduleRequest: {
            /** Format: double */
            amount?: number | null;
            /** Format: int32 */
            intervalDays?: number | null;
            notes?: string | null;
            unit?: string | null;
        };
        CreateCustomMetricRequest: {
            dataType: components["schemas"]["MetricDataType"];
            name: string;
            unit: string;
        };
        /** @description Google Tasks task creation request */
        CreateGoogleTaskRequest: {
            /**
             * Format: date-time
             * @example 2024-01-15T10:00:00Z
             */
            due_time: string;
            /** @example Time to water your Fiddle Leaf Fig. Remember to check soil moisture first. */
            notes?: string | null;
            /** @example Plant Care */
            task_list_id?: string | null;
            /** @example ðŸ’§ Water Fiddle Leaf Fig */
            title: string;
        };
        CreateInviteRequest: {
            /** Format: date-time */
            expires_at?: string | null;
            /** Format: int32 */
            max_uses?: number | null;
        };
        CreatePlantRequest: {
            customMetrics?: components["schemas"]["CreateCustomMetricRequest"][] | null;
            fertilizingSchedule?: components["schemas"]["CreateCareScheduleRequest"] | null;
            genus: string;
            /** Format: date-time */
            lastFertilized?: string | null;
            /** Format: date-time */
            lastWatered?: string | null;
            name: string;
            wateringSchedule?: components["schemas"]["CreateCareScheduleRequest"] | null;
        };
        CreateTrackingEntryRequest: {
            entryType: components["schemas"]["EntryType"];
            /** Format: uuid */
            metricId?: string | null;
            notes?: string | null;
            photoIds?: string[] | null;
            /** Format: date-time */
            timestamp: string;
            value?: unknown;
        };
        CreateUserRequest: {
            email: string;
            invite_code?: string | null;
            name: string;
            password: string;
        };
        CustomMetric: {
            dataType: components["schemas"]["MetricDataType"];
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: uuid */
            plantId: string;
            unit: string;
        };
        /** @enum {string} */
        EntryType: "watering" | "fertilizing" | "customMetric" | "note" | "photo";
        /** @description Request payload for OAuth callback */
        GoogleOAuthCallbackRequest: {
            code: string;
            state?: string | null;
        };
        /** @description Response after successful OAuth completion */
        GoogleOAuthSuccessResponse: {
            /** Format: date-time */
            connected_at: string;
            /** @example Google Tasks integration configured successfully */
            message: string;
            scopes: string[];
            success: boolean;
        };
        /** @description Response containing OAuth authorization URL */
        GoogleOAuthUrlResponse: {
            /** @example https://accounts.google.com/o/oauth2/auth?... */
            auth_url: string;
            /** @example abc123xyz */
            state: string;
        };
        /** @description Google Tasks connection status */
        GoogleTasksStatus: {
            connected: boolean;
            /** Format: date-time */
            connected_at?: string | null;
            /** Format: date-time */
            expires_at?: string | null;
            scopes?: string[] | null;
        };
        InviteResponse: {
            code: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            current_uses: number;
            /** Format: date-time */
            expires_at?: string | null;
            id: string;
            is_active: boolean;
            /** Format: int32 */
            max_uses: number;
        };
        LoginRequest: {
            email: string;
            password: string;
        };
        /** @enum {string} */
        MetricDataType: "Number" | "Text" | "Boolean";
        Photo: {
            contentType: string;
            /** Format: date-time */
            createdAt: string;
            filename: string;
            /** Format: int32 */
            height?: number | null;
            /** Format: uuid */
            id: string;
            originalFilename: string;
            /** Format: uuid */
            plantId: string;
            /** Format: int64 */
            size: number;
            /** Format: int32 */
            width?: number | null;
        };
        PhotosResponse: {
            photos: components["schemas"]["Photo"][];
            /** Format: int64 */
            total: number;
        };
        PlantResponse: {
            /** Format: date-time */
            createdAt: string;
            customMetrics: components["schemas"]["CustomMetric"][];
            fertilizingSchedule: components["schemas"]["CareSchedule"];
            genus: string;
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            lastFertilized?: string | null;
            /** Format: date-time */
            lastWatered?: string | null;
            name: string;
            /** Format: uuid */
            previewId?: string | null;
            previewUrl?: string | null;
            /** Format: date-time */
            updatedAt: string;
            userId: string;
            wateringSchedule: components["schemas"]["CareSchedule"];
        };
        PlantsResponse: {
            /** Format: int64 */
            limit: number;
            /** Format: int64 */
            offset: number;
            plants: components["schemas"]["PlantResponse"][];
            /** Format: int64 */
            total: number;
        };
        StoreTokensRequest: {
            /** @description The access token from Google OAuth */
            access_token: string;
            /**
             * Format: int64
             * @description Unix timestamp when the token expires
             */
            expires_at: number;
            /** @description The refresh token from Google OAuth (optional) */
            refresh_token?: string | null;
        };
        /** @description Google Tasks sync request */
        SyncPlantTasksRequest: {
            /**
             * Format: int32
             * @description Number of days in the future to sync tasks
             * @example 365
             */
            days_ahead?: number | null;
            /**
             * @description Whether to replace existing tasks or only add new ones
             * @example false
             */
            replace_existing?: boolean | null;
        };
        TrackingEntriesResponse: {
            entries: components["schemas"]["TrackingEntry"][];
            /** Format: int64 */
            total: number;
        };
        TrackingEntry: {
            /** Format: date-time */
            createdAt: string;
            entryType: components["schemas"]["EntryType"];
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            metricId?: string | null;
            notes?: string | null;
            photoIds?: unknown;
            /** Format: uuid */
            plantId: string;
            /** Format: date-time */
            timestamp: string;
            /** Format: date-time */
            updatedAt: string;
            value?: unknown;
        };
        UpdateCareScheduleRequest: {
            /** Format: double */
            amount?: number | null;
            /** Format: int32 */
            intervalDays?: number | null;
            notes?: string | null;
            unit?: string | null;
        };
        UpdateCustomMetricRequest: {
            data_type: components["schemas"]["MetricDataType"];
            /** Format: uuid */
            id?: string | null;
            name: string;
            unit: string;
        };
        UpdatePlantRequest: {
            customMetrics?: components["schemas"]["UpdateCustomMetricRequest"][] | null;
            fertilizingSchedule?: components["schemas"]["UpdateCareScheduleRequest"] | null;
            genus?: string | null;
            name?: string | null;
            wateringSchedule?: components["schemas"]["UpdateCareScheduleRequest"] | null;
        };
        UserResponse: {
            /** Format: date-time */
            createdAt: string;
            email: string;
            id: string;
            name: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ValidateInviteRequest: {
            code: string;
        };
        WaitlistResponse: {
            /** Format: date-time */
            created_at: string;
            email: string;
            id: string;
            name?: string | null;
            status: string;
        };
        WaitlistSignupRequest: {
            email: string;
            message?: string | null;
            name?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid credentials */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description Registration successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid registration data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_google_auth_url: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Google OAuth authorization URL */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleOAuthUrlResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Configuration error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handle_google_oauth_callback: {
        parameters: {
            query: {
                /** @description OAuth authorization code */
                code: string;
                /** @description OAuth state parameter */
                state?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to frontend with success/error */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid callback parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_task: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGoogleTaskRequest"];
            };
        };
        responses: {
            /** @description Task created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Google Tasks connection found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to create task */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    disconnect_google_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Google Tasks disconnected successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Google Tasks connection found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_google_tasks_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Google Tasks connection status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleTasksStatus"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    store_google_tokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreTokensRequest"];
            };
        };
        responses: {
            /** @description Tokens stored successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleOAuthSuccessResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to store tokens */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sync_plant_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SyncPlantTasksRequest"];
            };
        };
        responses: {
            /** @description Plant tasks synced successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No Google Tasks connection found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to sync tasks */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_invite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInviteRequest"];
            };
        };
        responses: {
            /** @description Invite code created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_invites: {
        parameters: {
            query?: {
                /** @description Filter by creator user ID */
                created_by?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of invite codes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    validate_invite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateInviteRequest"];
            };
        };
        responses: {
            /** @description Invite code is valid */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired invite code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    join_waitlist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WaitlistSignupRequest"];
            };
        };
        responses: {
            /** @description Added to waitlist */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitlistResponse"];
                };
            };
            /** @description Invalid request or email already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_waitlist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of waitlist entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitlistResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_plants: {
        parameters: {
            query?: {
                /** @description Maximum number of plants to return */
                limit?: number | null;
                /** @description Number of plants to skip */
                offset?: number | null;
                /** @description Search term for plant names */
                search?: string | null;
                /** @description Sort order: date_asc, date_desc, name_asc, name_desc */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of plants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_plant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePlantRequest"];
            };
        };
        responses: {
            /** @description Plant created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantResponse"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_plant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Plant details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_plant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePlantRequest"];
            };
        };
        responses: {
            /** @description Plant updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlantResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_plant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Plant deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_entries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                plant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List tracking entries for plant */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingEntriesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_entry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                plant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTrackingEntryRequest"];
            };
        };
        responses: {
            /** @description Tracking entry created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingEntry"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
