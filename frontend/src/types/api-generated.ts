/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plants/{plant_id}/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_entries"];
        put?: never;
        post: operations["create_entry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthResponse: {
            user: components["schemas"]["UserResponse"];
        };
        CreateCustomMetricRequest: {
            dataType: components["schemas"]["MetricDataType"];
            name: string;
            unit: string;
        };
        CreatePlantRequest: {
            customMetrics?: components["schemas"]["CreateCustomMetricRequest"][] | null;
            /** Format: int32 */
            fertilizingIntervalDays: number;
            genus: string;
            name: string;
            /** Format: int32 */
            wateringIntervalDays: number;
        };
        CreateTrackingEntryRequest: {
            entryType: components["schemas"]["EntryType"];
            /** Format: uuid */
            metricId?: string | null;
            notes?: string | null;
            photoIds?: string[] | null;
            /** Format: date-time */
            timestamp: string;
            value?: unknown;
        };
        CreateUserRequest: {
            email: string;
            name: string;
            password: string;
        };
        CustomMetric: {
            dataType: components["schemas"]["MetricDataType"];
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: uuid */
            plantId: string;
            unit: string;
        };
        /** @enum {string} */
        EntryType: "watering" | "fertilizing" | "customMetric" | "note";
        LoginRequest: {
            email: string;
            password: string;
        };
        /** @enum {string} */
        MetricDataType: "Number" | "Text" | "Boolean";
        Photo: {
            contentType: string;
            /** Format: date-time */
            createdAt: string;
            filename: string;
            /** Format: uuid */
            id: string;
            originalFilename: string;
            /** Format: uuid */
            plantId: string;
            /** Format: int64 */
            size: number;
        };
        PhotosResponse: {
            photos: components["schemas"]["Photo"][];
            /** Format: int64 */
            total: number;
        };
        Plant: {
            /** Format: date-time */
            createdAt: string;
            /** Format: int32 */
            fertilizingIntervalDays: number;
            genus: string;
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            lastFertilized?: string | null;
            /** Format: date-time */
            lastWatered?: string | null;
            name: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: uuid */
            userId: string;
            /** Format: int32 */
            wateringIntervalDays: number;
        };
        TrackingEntriesResponse: {
            entries: components["schemas"]["TrackingEntry"][];
            /** Format: int64 */
            total: number;
        };
        TrackingEntry: {
            /** Format: date-time */
            createdAt: string;
            entryType: components["schemas"]["EntryType"];
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            metricId?: string | null;
            notes?: string | null;
            photoIds?: unknown;
            /** Format: uuid */
            plantId: string;
            /** Format: date-time */
            timestamp: string;
            /** Format: date-time */
            updatedAt: string;
            value?: unknown;
        };
        UserResponse: {
            /** Format: date-time */
            createdAt: string;
            email: string;
            id: string;
            name: string;
            /** Format: date-time */
            updatedAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid credentials */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description Registration successful */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Invalid registration data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_entries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                plant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List tracking entries for plant */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingEntriesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_entry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Plant ID */
                plant_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTrackingEntryRequest"];
            };
        };
        responses: {
            /** @description Tracking entry created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingEntry"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Plant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
